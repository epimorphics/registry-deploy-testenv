<h1>Environment Registry API</h1>

<span class="anchor" id="introduction"></span>
<h2>Introduction</h2>

<p>The <a href="http://environment.data.gov.uk/registry/">Environment Registry</a> is used to publish and manage reference data such as code lists.
The registry service provides a web API for registering, updating and fetching the reference data.
This page summarizes the core elements of that API, sufficient for most common operations. Details of the full API are available on the development <a href="https://github.com/UKGovLD/registry-core/wiki/Api">wiki</a>.</p>

<p>The examples, content model and guidance given here are oriented towards the needs of the Environment Agency Data Standards team. However, the guidance should be generally applicable and we highlight any cases where the material is specific to that setting.</p>

<p>A separate copy of the registry service is provided for testing/training purposes. It includes a <em>Test</em> area that can be used for API testing. The contents of this test area are not permanent and may be reset at regular intervals. The test service is hosted at:
  <a href="http://environment-registry.epimorphics.net/registry/">http://environment-registry.epimorphics.net/registry/</a>
</p>

<span class="anchor" id="summary"></span>
<h2>Summary</h2>


<span class="anchor" id="summary-list"></span>
<h3>List register</h3>
<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>What</th><th>Request</th><th>Example</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>Fetch all currently valid entries, in machine readable format</td>
      <td><code>_format=csv|jsonld|ttl|rdf</code></td>
      <td><a href="/registry/def/test/measurement-types?_format=csv">{register}?_format=csv</a></td>
    </tr>
    <tr>
      <td>Include metadata along with the entries</td>
      <td><code>_view=with_metadata</code></td>
      <td><a href="/registry/def/test/measurement-types?_format=csv&_view=with_metadata">{register}?_format=csv <br />& _view=with_metadata</a></td>
    </tr>
    <tr>
      <td>All entries, even if not yet accepted or now deprecated</td>
      <td><code>status=any|accepted</code></td>
      <td><a href="/registry/def/test/measurement-types?_format=csv&status=any&_view=with_metadata">{register}?_format=csv <br />& status=any & _view=with_metadata</a></td>
    </tr>
    <tr>
      <td>Contents as they were at an earlier date</td>
      <td><code>_versionAt={ISO datetime}</code></td>
      <td><a href="/registry/def/test/measurement-types?_format=csv&_versionAt=2017-06-02T12:00:00Z">{register}?_format=csv <br />& _versionAt=2017-06-02T12:00:00Z</a></td>
    </tr>
    <tr>
      <td>Only those entries matching some filter criteria</td>
      <td>
        <code>{ex:prop}={value}</code><br />
        <code>min-{ex:prop}={value}</code><br />
        <code>minEx-{ex:prop}={value}</code><br />
        <code>max-{ex:prop}={value}</code><br />
        <code>maxEx-{ex:prop}={value}</code>
      </td>
      <td>
        <a href="/registry/def/test/measurement-types?std:code=11&_format=csv">{register}?std:code=11</a> <br />
        <a href="/registry/def/test/measurement-types?min-std:dateFrom=2017-06-03&_format=csv">{register}?min-std:dateFrom=2017-06-03</a> <br />
      </td>
    </tr>
  </tbody>
</table>

<span class="anchor" id="summary-record"></span>
<h3>Fetch single entry</h3>
<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>What</th><th>Request</th><th>Example</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>Fetch just the entity</td>
      <td><code>_format=csv|jsonld|ttl|rdf</code></td>
      <td><a href="/registry/def/test/measurement-types/tidal-level?_format=jsonld">{register}/{entity}?_format=jsonld</td>
    </tr>
    <tr>
      <td>Fetch entity plus metadata</td>
      <td><code>_view=with_metadata</code></td>
      <td><a href="/registry/def/test/measurement-types/tidal-level?_format=jsonld&_view=with_metadata">{register}/{entity}?_format=jsonld& _view=with_metadata</a>
      </td>
    </tr>
  </tbody>
</table>

<span class="anchor" id="summary-item"></span>
<h3>Metadata and history</h3>
<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>What</th><th>URI and parameter</th><th>Example</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>Fetch metadata item and the entity it describes <br /> (equivalent to above)</td>
      <td><code>_{item}</code></td>
      <td><a href="/registry/def/test/measurement-types/_tidal-level?_format=jsonld">{register}/_{item}?_format=jsonld</a>
      </td>
    </tr>
    <tr>
      <td>List historical versions of an item</td>
      <td><code>_{item}?_view=version_list</code></td>
      <td><a href="/registry/def/test/measurement-types/_tidal-level?_view=version_list&_format=jsonld">{register}/_{item}?_format=jsonld <br />_view=version_list</a></td>
    </tr>
    <tr>
      <td>Fetch specific version of an item</td>
      <td><code>_{item}:{version}</code></td>
      <td><a href="/registry/def/test/measurement-types/_tidal-level:1?_format=jsonld">{register}/_{item}:1?_format=jsonld</a></td>
    </tr>
  </tbody>
</table>

<span class="anchor" id="summary-update"></span>
<h3>Update</h3>
<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>What</th><th>HTTP action</th><th>Target</th><th>Payload</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>Create a new Register</td>
      <td>POST</td>
      <td><code>{parent-register}</code></td>
      <td>Register description.</td>
    </tr>
    <tr>
      <td>Add a new entry to a register</td>
      <td>POST</td>
      <td><code>{register}</code></td>
      <td>New entity, optionally including associated metadata item.</td>
    </tr>
    <tr>
      <td>Update an entry</td>
      <td>PUT/PATCH</td>
      <td><code>{register}/{entity}</code></td>
      <td>New or partial entity.</td>
    </tr>
    <tr>
      <td>Update metadata item for entry.</td>
      <td>PUT/PATCH</td>
      <td><code>{register}/_{item}</code></td>
      <td>New or partial item description, optionally with entity as well.</td>
    </tr>
    <tr>
      <td>Add or update multiple entries</td>
      <td>POST</td>
      <td><code>{register}?edit</code></td>
      <td>One or more entries, optionally including associated metadata items.</td>
    </tr>
    <tr>
      <td>Set the status of a register or item</td>
      <td>POST</td>
      <td>
        <code>{register}?update&status={status}</code> <br />
        <code>{register}/_item?update&status={status}</code>
      </td>
      <td>Empty</td>
    </tr>
  </tbody>
</table>

<span class="anchor" id="model"></span>
<h2>Content model</h2>

<spam class="anchor" id="model-registry"></span>
<h3>Registry model</h3>

<p>A <em>register</em> is a controlled list of entries. <br/>
  The entries may be nested registers or may be individual entities such as codes in a code list. Each register corresponds to a URI in the registry namespace.</p>

<p>A <em>register item</em> holds the metadata and version information for a single entry in a register.  <br/>
  Internally registers contain <em>Register Items</em> and each item then points to some associated content record described the <em>entity</em> being registered. Externally the API makes it easy to list just the content records, by-passing the item metadata unless it's needed. Each item has a URI which is a child of the register containing it: <code>{register}/_{notation}</code>. The <code>notation</code> acts as a local identifier within the code list, it must not start with a <code>_</code> character and must be a legal URI segment.

<p>An <em>entity</em> is the thing being registered as an entry in the register.  <br/>
  It is generally some abstract code but may also represent some real world entity such as an organization, a geographic location or a chemical substance. Typically the description of the entity is managed by the registry and falls within the registry namespace, in which case the entity URI is <code>{register}/{notation}</code> (corresponding to the associated item <code>{register}/_{notation}</code>). </p>

  <p>However, the registry also permits <em>external</em> or <em>referenced</em> entities to be registered. In that case the URI for the entity may be arbitrary. This is useful to allow a register to reference some controlled subset of some larger external code list, or to combine codes from multiple lists. The corresponding register item describes the metadata and status of the external items with respect to register. So the same external entry may have different submitters and different status in different registers which reflects the different purposes of those registers.</p>

<spam class="anchor" id="model-record"></span>
<h3>Structure of an entry</h3>

<p>The registry allows arbitrary information to be recorded about each registered entity - including code strings, labels, descriptive text and cross-links. There is no fixed schema and different entries in the same register may have different properties.</p>

<p>Each entity is described by an open set of properties, each property can have one or more values. Additional properties and property values can be added to the recorded description at a later date.</p>

<p>The properties are identified by URIs. For convenience most of the supported formats make use of a shortened prefix form (syntactically similar to <em>qnames</em> in XML) such as <code>std:shortName</code>. The available prefixes are themselves held as a <a href="/registry/system/prefixes">controlled list</a> in the registry service.</p>

<p>The values given to properties are typically strings, numbers, dates, date-times (all based on <a href="https://www.w3.org/TR/xmlschema-2/">XML Schema datatypes</a>) or URIs. Nested structured values are possible but are not covered in this documentation.</p>

<p>While the data model is open there is a minimum of information required and some supporting guidelines. At a minimum all records must include a text label (normally given by the <code>rdfs:label</code> property) and a type (given by <code>rdf:type</code>). The W3C standard for representing concept schemes and thesauri, <a href="https://www.w3.org/TR/skos-reference/">SKOS</a>, provides a useful menu of other properties. If in doubt use <code>skos:Concept</code> as the type for an entry. In addition it is often useful to have a longer description of the entity to display, for this we recommend the <a href="http://dublincore.org/documents/dcmi-terms/">Dublin Core terms</a>, specifically <code>dct:description</code>.</p>

<p>The Environment Agency Data Standards group has developed a data model for code list entries. For convenience we provide a <a href="/registry/def/data-standards/code-vocab">set of properties</a> to represent the terms in this data model, and assign this vocabulary the prefix <code>std</code>. So for this group a typical record for an entity might contain:</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Property</th><th>Meaning</th><th>Required</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>rdfs:label</code></td>
      <td>A text label for the entry.</td>
      <td>Required</td>
    </tr>
    <tr>
      <td><code>rdf:type</code></td>
      <td>The type of the entry, use <code>skos:Concept</code> as a default.</td>
      <td>Required</td>
    </tr>
    <tr>
      <td><code>dct:description</code></td>
      <td>A longer description for the entry.</td>
      <td>Recommended</td>
    </tr>
    <tr>
      <td><code>std:shortName</code></td>
      <td>Alternate name for the entry.</td>
      <td></td>
    </tr>
    <tr>
      <td><code>std:code</code></td>
      <td>A code for the entry.</td>
      <td></td>
    </tr>
    <tr>
      <td><code>std:dateFrom</code></td>
      <td>Date valid from.</td>
      <td></td>
    </tr>
    <tr>
      <td><code>std:dateTo</code></td>
      <td>Date valid until.</td>
      <td></td>
    </tr>
    <tr>
      <td><code>std:changeType</code></td>
      <td>The nature of the most recent change applied to the entry.</td>
      <td></td>
    </tr>
    <tr>
      <td><code>std:submittedBy</code></td>
      <td>The name of the person who submitted this entry in the internal data standard, this may be distinct from the metadata information in the registry (since the latter records the account used to upload the information the registry, which may be different from the original submitter).</td>
      <td></td>
    </tr>
    <tr>
      <td><code>std:status</code></td>
      <td>Status of the code within the Environment Agency Data Standards status model, this may differ from its status as a registry entry due to differences in the lifecycle model.</td>
      <td></td>
    </tr>
  </tbody>
</table>

<spam class="anchor" id="model-metadata"></span>
<h3>Metadata and status</h3>

<p>As outlined above, each entry in a register is described by a package of metadata, a <em>register item</em>. The full model of register items is described in the  <a href="https://github.com/UKGovLD/registry-core/wiki/Api">wiki</a> and summarized in this <a href="https://raw.githubusercontent.com/wiki/ukgovld/registry-core/images/registry-diagram.png">diagram</a>. Like the content records themselves, the register item data model is open and arbitrary additional metadata properties can be added to an item.</p>

<p>For the most common use cases then the primary metadata information is the <em>status</em> of the entry in the register. The status denotes the standing of the entry as far as that specific register is concerned, the same entity can be included in different registers and may have a different status in each. For example, one agency might regard a particular code as stable and ready for production use whereas another might be deprecating it for their own use.</p>

<p>The legal status values (and associated life-cycle) can be configured differently for each registry service.
  The default status hierarchy, as used by the Environment Registry, is:</p>

<ul>
  <li><code>notAccepted</code></li>
  <ul>
    <li><code>submitted</code> - submitted to the register but not yet accepted by the register manager</li>
    <li><code>invalid</code> - invalid entry that should never be used</li>
  </ul>
  <li><code>accepted</code></li>
  <ul>
    <li><code>valid</code> - status options that indicate a valid entry that may be used </li>
    <ul>
      <li><code>experimental</code> - entry is being evaluated and may be altered or withdrawn</li>
      <li><code>stable</code> - entry currently regarded as stable and safe to use</li>
    </ul>
    <li><code>deprecated</code> - entries previously valid but now withdrawn for use in new applications</li>
    <ul>
      <li><code>retired</code> - should no longer be used and has no replacement</li>
      <li><code>superseded</code> - should no longer be used, has been replaced by a different entry</li>
    </ul>
  </ul>
</ul>

<p>Entries are initially in state <code>submitted</code>, can then be accepted as either <code>experimental</code> and later promoted to <code>stable</code> or go directly to <code>stable</code>. A valid entry can later be retired or superseded. At any point if an entry is regarded as an error it can be invalidated.</p>

<p>By default the UI and API will return only entries marked by one of the <code>valid</code> states, however the API can be used to list entries in any specific state (at any level in the hierarchy) or list entries in <code>any</code> state.</p>

<p><strong>N.B.</strong> Users of the Environment Agency Data Standards metadata model should be aware that this uses a different status lifecycle and the status of an entry within this model is recorded as a separate <code>std:status</code> property on the entry itself (and thus has no effect on visibility of the entry in the register).</p>

<spam class="anchor" id="model-format"></span>
<h3>Data format options</h3>

<p>Internally the registry uses the <a href="https://www.w3.org/TR/rdf11-primer/">RDF data model</a> but can return and accept entry data in a variety of serializations:</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Name</th><th>Media type</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>csv</td>
      <td><code>text/csv</code></td>
      <td>An easy to use CSV encoding which can represent both entries and core metadata (status) but not arbitrary metadata.</td>
    </tr>
    <tr>
      <td>jsonld</td>
      <td><code>application/ld+json</code></td>
      <td>A standardized <a href="https://www.w3.org/TR/json-ld/">json-based syntax</a> which is able to encode arbitrary RDF data.</td>
    </tr>
    <tr>
      <td>rdf</td>
      <td><code>application/rdf+xml</code></td>
      <td>A XML encoding of the RDF data using the <a href="https://www.w3.org/TR/rdf-syntax-grammar/">RDF/XML standard</a>.</td>
    </tr>
    <tr>
      <td>ttl</td>
      <td><code>text/turtle</code></td>
      <td>A more human readable encoding of the RDF data using the <a href="https://www.w3.org/TR/turtle/">Turtle standard</a>.</td>
    </tr>
  </tbody>
</table>

<p></p>
<p>For developers unfamiliar with the RDF data model and tooling we recommend the CSV format. It is compact, easy to work with and hides the more complex features of the registry model. For developers needing full access to the metadata then the jsonld format is suggested. However, be warned that the jsonld encoding is harder to work with than more "idiomatic" json formats.</p>

<p>When fetching data then the format can be specified using a query parameter (<code>_format={name}</code>) passing the name of the format requested, or by using normal <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation">HTTP content negotiation</a> using the media types as listed above. If no format is specified then the default return, if permitted by the content negotiation, is HTML format suitable for human viewing via a browser.</p>

<p>When submitting data programmatically then the normal <code>Content-Type</code> HTTP header should be used to indicate the format. Character encoding should be UTF-8 for all the formats. The UI distinguishes different interactive uploads by their file name extensions, and expects the extension to match the format name as given above.</p>

<spam class="anchor" id="model-csv"></span>
<h3>Format: csv</h3>

<p>The CSV format returns register entries one entry per row with a column for each property. The columns are either one of the reserved column names listed below or named using the prefix syntax explained <a href="#model-record">earlier</a>.</p>

<p></p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Column name</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>@id</code></td>
      <td>The URI of the entity.</td>
    </tr>
    <tr>
      <td><code>@status</code></td>
      <td>The status of the register item using the short names listed <a href="#model-metadata">above</a>. Only present if a view "with datadata" is requested.</td>
    </tr>
    <tr>
      <td><code>@notation</code></td>
      <td>The local notation for the item within the register. Normally, except when the entry is a reference to an external entity, this is the same as the last segment of the URI. Only present if a view "with_datadata" is requested.</td>
    </tr>
  </tbody>
</table>

<p></p>
<p>The values in the CSV cells are one of the following:</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Type</th><th>Syntax example</th></tr>
  </thead>
  <tbody>
    <tr>
      <td>String</td>
      <td><code>string</code> or <code>'string'</code></td>
    </tr>
    <tr>
      <td>Language tagged string</td>
      <td><code>'string'@en</code></td>
    </tr>
    <tr>
      <td>Number</td>
      <td><code>1234</code> for integer or <code>12.34</code>for decimal</td>
    </tr>
    <tr>
      <td>Boolean</td>
      <td><code>true</code> or <code>false</code></td>
    </tr>
    <tr>
      <td>URI</td>
      <td><code>&lt;http://foo/bar&gt;</code> or <code>prefix:local</code></td>
    </tr>
  </tbody>
</table>

<p>If a property has multiple values they are separated by a <code>|</code> (with <code>||</code> used to indicate an actual pipe character).</p>

<p>So an example CSV return for a register, with metadata is:</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr>
      <th>@id</th>
      <th>@notation</th>
      <th>@status</th>
      <th>dct:description</th>
      <th>rdf:type</th>
      <th>rdfs:label</th>
      <th>std:code</th>
    </tr>
  </thead>
  <tbody>
    <tr><td>&lt;http://environment.data.gov.uk/registry/def/test/measurement-types/tidal-level></td><td>tidal-level</td><td>experimental</td><td>Tidal level relative to national datum</td><td>skos:Concept</td><td>Tidal Level</td><td>10</td></tr>
    <tr><td>&lt;http://environment.data.gov.uk/registry/def/test/measurement-types/downstage-level&gt;</td><td>downstage-level</td><td>experimental</td><td>Water Level at Downstage measurement point</td><td>skos:Concept</td><td>Downstage Water Level</td><td>3</tr>
    <tr><td>&lt;http://environment.data.gov.uk/registry/def/test/measurement-types/flow></td><td>flow</td><td>experimental</td><td>Water flow in m^3/s</td><td>skos:Concept</td><td>Water Flow</td><td>1</td></tr>
    <tr><td>&lt;http://environment.data.gov.uk/registry/def/test/measurement-types/stage-level></td><td>stage-level</td><td>experimental</td><td>Water Level at Stage measurement point</td><td>skos:Concept</td><td>Stage Water Level</td><td>2</td></tr>
    <tr><td>&lt;http://environment.data.gov.uk/registry/def/test/measurement-types/wind-dirn></td><td>wind-dirn</td><td>retired</td><td>Wind direction</td><td>skos:Concept</td><td>Wind Direction</td><td>5</td></tr>
  </tbody>
</table>

<spam class="anchor" id="model-jsonld"></span>
<h3>Format: jsonld</h3>

<p>The jsonld format represents each entry (and item) as a JSON object with keys normally based on the prefixes property name and simple string values. For example, the first entry from the above CSV example returned as a single entry without metadata is:</p>

<pre><code class="json">{ 
  "@id" : "http://environment.data.gov.uk/registry/def/test/measurement-types/tidal-level",
  "@type" : "skos:Concept",
  "std:code" : {
    "@type" : "xsd:integer",
    "@value" : "10"
  },
  "std:shortName" : "Tide",
  "dct:description" : "Tidal level relative to national datum",
  "rdfs:label" : "Tidal Level",
  "@context" : {
    "xsd" : "http://www.w3.org/2001/XMLSchema#",
    ...
  }
}
</code></pre>

Note the following:

<ul>
  <li>The URI of the entry itself is given using the <code>@id</code> property, as for the CSV format.</li>
  <li>The <code>@type</code> property is a synonym for <code>rdf:type</code>.</li>
  <li>Typed values such as numbers are represented by nested objects.</li>
  <li>The <code>@context</code> contains prefix mappings and other information to enable the jsonld to be interpreted standalone.</li>
  <li>In some situations the property names will be given without a prefix and the prefixed form can then be found in the <code>@context</code>.</li>
  <li>Multiple values are indicated using JSON arrays in the obvious manner.</li>
  <li>To refer to another resource via its URI use a property value of the form <code>{"@id" : "target-uri"}</code>.</li>
</ul>

<p>When creating a jsonld record for upload then use an <code>@context</code> value of <code>"http://environment.data.gov.uk/registry/system/json-context"</code> to include all the registered prefixes.</p>

<p>When multiple values are returned jsonld will represent these as an array of objects within an overall <code>@graph</code> wrapper. For example, listing the same register as given in the above CSV example gives the result:</p>

<pre><code class="json">{ 
  "@graph" : [ {
    "@id" : "http://environment.data.gov.uk/registry/def/test/measurement-types",
    "@type" : [ "ldp:Container", "reg:Register" ],
    "dct:description" : "Artificial example register ...",
    "dct:modified" : {
      "@type" : "xsd:dateTime",
      "@value" : "2017-06-01T10:27:53.082Z"
    },
    "reg:owner" : {
      "@id" : "http://environment.data.gov.uk/registry/structure/org/environment-agency"
    },
    "rdfs:label" : "Measurement Types",
    "rdfs:member" : [ {
      "@id" : "http://environment.data.gov.uk/registry/def/test/measurement-types/tidal-level"
      }, ...
    ],
    "owl:versionInfo" : {
      "@type" : "xsd:integer",
      "@value" : "1"
    }
  }, 
  { 
    "@id" : "http://environment.data.gov.uk/registry/def/test/measurement-types/tidal-level",
    "@type" : "skos:Concept",
    "std:code" : {
      "@type" : "xsd:integer",
      "@value" : "10"
    },
    "std:shortName" : "Tide",
    "dct:description" : "Tidal level relative to national datum",
    "rdfs:label" : "Tidal Level",
  },
  ...
  ],
  "@context" : {
    "xsd" : "http://www.w3.org/2001/XMLSchema#",
    ...
  }
}
</code></pre>

<p>Note that the jsonld format includes an explicit description of the register itself, including a list of all its members. This is also true of the RDF formats.</p>

<p>In some cases the values of properties, especially in metadata records, may include nested structures rather than simple strings or typed values. In those cases the jsonld serialisation with break each contained value out as a separate object with an internal <code>@id</code> identifier of the form <code>_:nnn</code>. In a more idiomatic JSON syntax these values would be represented by a tree of nested objects, though it is relatively easy for an application to construct this tree representation from the flattened jsonld format using the <code>@id</code> links.</p>

<span class="anchor" id="register"></span>
<h2>Retrieving a register (code list)</h2>

<p>An HTTP GET on the register URI will return a description of the register and its contents, modified according to following query flags:</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Flag</th><th>Meaning</th><th>Notes</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>_format=csv|jsonld|ttl|rdf</code></td>
      <td>Format to return. See <a href="#model-format">above</a>.</td>
      <td>The csv format will just list entries in the register, the other formats will include a description of the register itself as well.</td>
    </tr>
    <tr>
      <td><code>_view=with_metadata</code></td>
      <td>Include register item metadata alongside the entity descriptions.</td>
      <td>In the case of csv format this just adds <code>@status</code> and <code>@notation</code> columns, see <a href="#model-csv">above</a>.</td>
    </tr>
    <tr>
      <td><code>non-member-properties</code></td>
      <td>Return only a description of the register not its contents.</td>
      <td>Only usable with formats other than CSV.</td>
    </tr>
    <tr>
      <td><code>status=any|{status}</code></td>
      <td>Include those members whose status matches the given value.</td>
      <td>The pseudo-status <code>any</code> returns all entries of any status. The default corresponds to status <code>valid</code>. Another useful other option is <code>accepted</code> to fetch all entries that have been accepted including those which are now deprecated.</td>
    </tr>
    <tr>
      <td><code>{ex:prop}={value}</code></td>
      <td>Return only members whose <code>ex:prop</code> property has the given value.</td>
      <td>The values which syntactically appear to be URIs, integers, decimals, booleans, dates or datetimes will be treated as such.</td>
    </tr>
    <tr>
      <td><code>min-{ex:prop}={value}</code></td>
      <td>Return only members whose <code>ex:prop</code> property is greater than or equal to the given value.</td>
      <td>Values are treated as above.</td>
    </tr>
    <tr>
      <td><code>minEx-{ex:prop}={value}</code></td>
      <td>Return only members whose <code>ex:prop</code> property is greater than the given value.</td>
      <td>Values are treated as above.</td>
    </tr>
    <tr>
      <td><code>max-{ex:prop}={value}</code></td>
      <td>Return only members whose <code>ex:prop</code> property is less than or equal to the given value.</td>
      <td>Values are treated as above.</td>
    </tr>
    <tr>
      <td><code>maxEx-{ex:prop}={value}</code></td>
      <td>Return only members whose <code>ex:prop</code> property is less than the given value.</td>
      <td>Values are treated as above.</td>
    </tr>
    <tr>
      <td><code>_page=n</code></td>
      <td>Return just one <em>page</em> of entries. <code>firstpage</code> is an alias for <code>_page=0</code>. </td>
      <td>This is provided so as to manage client resources when retrieving very large registers. The page size of the Environment Registry is set to  5000 so paging is rarely used.</td>
    </tr>
  </tbody>
</table>

<h3>Examples</h3>

<p>Retrieve all currently valid entries as a CSV, one row per entry:</p>
<div class="indented"><a href="/registry/def/test/measurement-types?_format=csv">{register}?_format=csv</a></div>

<p>Retrieve all currently valid and deprecated entries, including their status, as a CSV:</p>
<div class="indented"><a href="/registry/def/test/measurement-types?_format=csv&_view=with_metadata&status=accepted">{register}?_format=csv &amp; _view=with_metadata &amp; status=accepted</a></div>

<p>Retrieve as a CSV all currently valid entries whose code value (expressed using the <code>std:code</code> property) is equal to 11:</p>
<div class="indented"><a href="/registry/def/test/measurement-types?_format=csv&std:code=11">{register}?_format=csv &amp; std:code=11</a></div>

<p>Retrieve as a CSV all currently valid entries which date from 3 June 2017 onwards (expressed using the <code>std:dateFrom</code> property):</p>
<div class="indented"><a href="/registry/def/test/measurement-types?_format=csv&min-std:dateFrom=2017-06-03">{register}?_format=csv &amp; min-std:dateFrom=2017-06-03</a></div>

<span class="anchor" id="item"></span>
<h2>Retrieving an entry</h2>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>URL</th><th>Parameters</th><th>Description</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>{register}/{entity}</code></td>
      <td>
        <code>_format=csv|jsonld|ttl|rdf</code> <br />
        <code>_view=with_metadata</code>
      </td>
      <td>Return the description on a single entry. Only applicable when the entity is local to the registry. To fetch the registry's description of an external entity and use the item URL as below.</td>
    </tr>
    <tr>
      <td><code>{register}/_{item}</code></td>
      <td>
        <code>_format=jsonld|ttl|rdf</code>
      </td>
      <td>Returns the item metadata along with a description of the corresponding entity.</td>
    </tr>
  </tbody>
</table>

<h3>Examples</h3>

<p>The description of a single entry in JSON-LD format:</p>
<div class="indented"><a href="/registry/def/test/measurement-types/flow?_format=jsonld">{register}/{entity}?_format=jsonld</a></div>

<p>Return the full metadata for an item, along with the entity, in JSON-LD format:</p>
<div class="indented"><a href="/registry/def/test/measurement-types/_flow?_format=jsonld">{register}/_{item}?_format=jsonld</a></div>

<span class="anchor" id="versions"></span>
<h2>History and versions</h2>

<p>The registry maintains a history of all versions of a register entry which is updated whenever its description or status is changed. Each version is given a version number which is included in the metadata (the register item). It is possible to retrieve a specific numbered version of an entry, to list the history of versions of an entry or retrieve an entire register as it was at a specific date and time.</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Request</th><th>What</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>{register}?_versionAt={ISO datetime}</code></td>
      <td>Fetch register contents as they were at an earlier date</td>
    </tr>
    <tr>
      <td><code>{register}/_{item}?_view=version_list</code></td>
      <td>List historical versions of an item</td>
    </tr>
    <tr>
      <td><code>{register}/_{item}:{version}</code></td>
      <td>Fetch specific version of an item</td>
    </tr>

  </tbody>
</table>

<h3>Examples</h3>

<p>A register in its original state:</p>
<div class="indented">
  <a href="/registry/def/test/measurement-types?_format=csv&_versionAt=2017-06-02T12:00:00Z">{register}?_format=csv &amp; _versionAt=2017-06-02T12:00:00Z</a>
</div>

<p>The same register after two items have been deprecated:</p>
<div class="indented">
  <a href="/registry/def/test/measurement-types?_format=csv&_versionAt=2017-06-04T12:00:00Z">{register}?_format=csv &amp; _versionAt=2017-06-04T12:00:00Z</a>
</div>

<p>The history of versions of an item whose description has changed (in RDF syntax for readability):</p>
<div class="indented">
  <a href="/registry/def/test/measurement-types/_tidal-level?_view=version_list&_format=ttl">{register}/_{item}?_format=ttl &amp;_view=version_list</a>
</div>

<p>The current version of that item (as a CSV):</p>
<div class="indented">
  <a href="/registry/def/test/measurement-types/_tidal-level:2?_format=csv">{register}/_{item}:2?_format=csv</a>
</div>

<p>The previous version of that item with a different description (as a CSV):</p>
<div class="indented">
  <a href="/registry/def/test/measurement-types/_tidal-level:1?_format=csv">{register}/_{item}:1?_format=csv</a>
</div>


<span class="anchor" id="update"></span>
<h2>Update</h2>

<span class="anchor" id="update-entry"></span>
<h3>Register one entry</h3>
<p>To add a new entry, construct a description of the entry in, for example, csv or jsonld format, and POST it to the parent register. If the result is successful the returned HTTP <code>Location</code> header will give the URI of the created item within the register.</p>

<p>For example, if file <code>eg1.jsonld</code> contains:</p>
<pre><code class="json">{
  "@context" : "http://environment.data.gov.uk/registry/system/json-context",

  "@id"             : "eg1",
  "@type"           : "skos:Concept",
  "rdfs:label"      : "Example 1",
  "dct:description" : "An example",
  "std:code"        : 1
}
</code></pre>

<p>Then to add this example to an existing register use:</p>
<pre><code class="nohighlight">curl -i --basic --user username:password -X POST -H "Content-Type: application/ld+json" --data-binary "@eg1.jsonld" {registry}/def/test/egreg
</code></pre>

<p>This will return a response with headers including:</p>
<pre><code class="nohighlight">HTTP/1.1 201 Created
Date: Sun, 11 Jun 2017 14:25:59 GMT
Location: http://environment.data.gov.uk/registry/def/test/egreg/_eg1
Content-Length: 0
</code></pre>

<p>Notice that the supplied <code>@id</code> is a relative URI which is then resolved relatvie to the receiving register. </p>

<p>At this point the new entry will have status of <code>submitted</code> and will not be visible to normal UI users. To set it's status POST an empty request to <code>{register}/_{item}?update&status={status}</code>. For example:</p>
<pre><code class="nohighlight">curl -i --basic --user username:password -X POST "{registry}/def/test/egreg/_eg1?update&status=experimental"
</code></pre>

<p>The request will be rejected if the change of status breaks the expected <a href="#model-metadata">lifecycle</a>, though it is possible to override this.</p>

<p>It is possible to both register an entry and set its status at the same time by providing both register item metadata and the entity. The CSV format makes this particularly convenient. For example, the given payload will create a second entry and set its status:</p>
<pre><code class="nohighlight">@id,@status,rdfs:label,std:code,dct:description,rdf:type
&lt;eg2>,experimental,Example 2,2,Another example,skos:Concept
</code></pre>

<p>It can be submitted using:</p>
<pre><code class="nohighlight">curl -i --basic --user username:password -X POST -H "Content-Type: text/csv" --data-binary "@eg2.csv" {registry}/def/test/egreg
</code></pre>

<p>Note that this will only work for a user who has appropriate permissions. It is possible to grant a user power to submit proposed new entries but not set their status.</p>

<span class="anchor" id="update-register"></span>
<h3>Create a register</h3>

<p>To create  register simply create an entry of the right type in its parent register. An example, payload in jsonld would be:</p>
<pre><code class="json">{
  "@context" : "http://environment.data.gov.uk/registry/system/json-context",

  "@id"             : "egreg",
  "@type"           : "reg:Register",
  "rdfs:label"      : "Example register",
  "dct:description" : "Test example register",

  "reg:owner"       : {"@id": "http://environment.data.gov.uk/registry/structure/org/environment-agency"},
  "reg:category"    : {"@id" : "http://environment.data.gov.uk/registry/structure/category/System"},
  "env-ui:entityType" : {"@id" : "http://environment.data.gov.uk/registry/structure/entity-type/Abstract"},
}
</code></pre>

<p>The last three properties are optional but provide useful metadata to enable faceted browsing of registers within the UI. In particular, it is recommended to always provide an owner, normally drawn from the registry controlled list of <a href="/registry/structure/org">organizations</a>. The category property indicates the <a href="/registry/structure/category">domain</a> to which the register applies. The entityType property indicates the <a href="/registry/structure/entity-type">type of entities</a> the register describes, </p>
<span class="anchor" id="update-item"></span>

<h3>Update an item</h3>
<p>An HTTP PUT operation can be used to update an entry, either the entity itself or the metadata as well. For example, the following file can be used to update our earlier example:</p>

<pre><code class="json">{
  "@context" : "http://environment.data.gov.uk/registry/system/json-context",

  "@id"             : "http://environment.data.gov.uk/registry/def/test/egreg/eg1",
  "@type"           : "skos:Concept",
  "rdfs:label"      : "Example 1",
  "dct:description" : "A modified example",
  "std:code"        : "1"
}
</code></pre>

<p>The update can be performed by:</p>
<pre><code class="nohighlight">curl -i --basic --user username:password -X PUT -H "Content-Type: application/ld+json" --data-binary "@eg1b.jsonld" {registry}/def/test/egreg/eg1
</code></pre>

<p>Note that the URI for the entity in the payload must match the logical URI for the entity in the registry.</p>

<p>It is also possible to change some properties of an item, leaving others unchanged by providing a partial payload and using the HTTP PATCH operation in place of PUT.</p>

<span class="anchor" id="update-edit"></span>
<h3>Update and add multiple items</h3>
<p>It common to wish to create a modify multiple entries at the same time. The registry provides a variety of mechanisms for this including the ability to upload both a register and its contents at the same time. Here we just cover the most common and flexible operation the <em>edit</em> action. </p>

<p>The edit action allows a submitter to provide a set entries, with or without metadata. If any of entries already exist then they will be updated, otherwise they will be added. When an entry is updated then any existing properties of the entry which aren't mentioned in the payload will be left unchanged, thus acting as a PATCH operation. While the edit action supports any of the data formats it works particularly well with the CSV format - making it possible to fetch a register, edit the contents in a spreadsheet program, and then submit the changes.</p>

<p>The edit action is invoked by POSTing the content updates to the register with the <code>edit</code> query parameter.</p>

<p>For example, after the above set of example update actions the <code>egreg</code> register contains the following entries:</p>

<pre><code class="nohighlight">@id,dct:description,rdf:type,rdfs:label,std:code
&lt;http://environment.data.gov.uk/registry/def/test/egreg/eg1>,A modified example,skos:Concept,Example 1,1
&lt;http://environment.data.gov.uk/registry/def/test/egreg/eg2>,Another example,skos:Concept,Example 2,2
</code></pre>

<p>This can be obtained, for example, using:</p>
<pre><code class="nohighlight">curl -i {registry}/def/test/egreg?_format=csv
</code></pre>

<p>A modified version of these contents might be:</p>
<pre><code class="nohighlight">@id,dct:description,rdf:type,rdfs:label,std:code
&lt;http://environment.data.gov.uk/registry/def/test/egreg/eg1>,An updated example,skos:Concept,Example 1,1
&lt;http://environment.data.gov.uk/registry/def/test/egreg/eg2>,Another updated example,skos:Concept,Example 2,2
</code></pre>

<p>Which we can submit using:</p>
<pre><code class="nohighlight">curl -i --basic --user username:password -X POST -H "Content-Type: text/csv" --data-binary "@egupdate.csv" {registry}/def/test/egreg?edit
</code></pre>

<p>Similarly a fetch with metadata would include an <code>@status</code> field which can then be modified and submitted back as an <em>edit</em> in the same way.</p>

<span class="anchor" id="search"></span>
<h2>Search</h2>

<p>The registry supports text search over the labels and descriptions of entries and registers. Submit a GET request to the root of the registry with the following query parameters:</p>

<table class="table table-condensed table-bordered">
  <thead>
    <tr><th>Parameter</th><th>Meaning</th></tr>
  </thead>
  <tbody>
    <tr>
      <td><code>query="text"</code></td>
      <td>Search for all entries whose label or description contains <code>text</code>. Use <code>*</code> for wildcards and <code>AND</code> for conjunctions.</td>
    </tr>
    <tr>
      <td><code>{ex:prop}={value}</code></td>
      <td>Used in conjunction with a text <code>query</code> this limits the returns to those entries whose value of the <code>ex:prop</code> property matches the give value. Supports <code>min-</code>, <code>minEx-</code>, <code>max-</code> and <code>maxEx-</code> prefixes, as for register listing.</td>
    </tr>
    <tr>
      <td><code>_format=jsonld|ttl|rdf</code></td>
      <td>Select the format in which results should be returned, note that CSV format is not currently supported for text search.</td>
    </tr>
  </tbody>
</table>

<p></p>
<p>For example, in a registry with to which the above example updates have been applied then a GET on:</p>
<div class="indented"><code>{registry}?query=example&_format=jsonld</code></div>
<p> will return:</p>

<pre><code class="json">{
  "@graph" : [ {
    "@id" : "http://environment.data.gov.uk/registry/def/test/egreg",
    "@type" : [ "ldp:Container", "reg:Register" ],
    "description" : "Test example register",
    "modified" : "2017-06-11T19:30:06.761Z",
    "owner" : "http://environment.data.gov.uk/registry/structure/org/environment-agency",
    "label" : "Example register",
    "owl:versionInfo" : 3
  }, {
    "@id" : "http://environment.data.gov.uk/registry/def/test/egreg/eg1",
    "@type" : "skos:Concept",
    "std:code" : 1,
    "description" : "An updated example",
    "label" : "Example 1"
  }, {
    "@id" : "http://environment.data.gov.uk/registry/def/test/egreg/eg2",
    "@type" : "skos:Concept",
    "std:code" : 2,
    "description" : "Another updated example",
    "label" : "Example 2"
  }, {
    "@id" : "http://environment.data.gov.uk/registry/structure?firstPage&query=example&_format=jsonld",
    "@type" : "ldp:Page",
    "items" : {
      "@list" : [ "http://environment.data.gov.uk/registry/def/test/egreg/eg1", "http://environment.data.gov.uk/registry/def/test/egreg/eg2", "http://environment.data.gov.uk/registry/def/test/egreg" ]
    },
    "pageOf" : "http://environment.data.gov.uk/registry/structure?query=example&_format=jsonld"
  }, {
    "@id" : "http://environment.data.gov.uk/registry/structure?query=example&_format=jsonld",
    "member" : [ "http://environment.data.gov.uk/registry/def/test/egreg", "http://environment.data.gov.uk/registry/def/test/egreg/eg2", "http://environment.data.gov.uk/registry/def/test/egreg/eg1" ]
  } ],
  "@context" : {
     ...
  }
}
</code></pre>

<p>Here the entry of type <code>ldp:Page</code> provides one page of results with <code>items/@list</code> listing the URIs of the matching entries. The other elements in the result set provide descriptions of those matched entries.</p>

<p>Note that csv format for search results is not currently supported.</p>
